import requests
import urllib3
urllib3.disable_warnings()
import re
import json

def bky_login(s):
    """博客园登录"""
    s.verify=False
    url = "https://www.cnblogs.com/"

    c = requests.cookies.RequestsCookieJar()
    c.set(".Cnblogs.AspNetCore.Cookies","CfDJ8D8Q4oM3DPZMgpKI1MnYlrntZQZgzcYrfe4AefenTz3QdPCNxa7wT6Ws7f4gVEzoA1bjO_py-JV8cicE929WESLe1KdozvNrmyhfC53b1HJ53Ys5hpU2UiGi2KpwmFS5m-KRzRYYVMJPWZiGYKWoh7sBcG7OG9IRerp6DGEL6tMO7xaHG895ag26BAgpbQMh3_pH1so7AuIqUvWtdj3_gZ8K177pF6Gk4h2iHVRzQpIkDflhdITSqpq8Vcsilh_38VaQg4Rz2rjPbOwHSupWbGmlortv_G0ElxOLCcLzVeWcm7ARRwCIXVQ7FEbYTEp0LEfvK5RsVDt-FFWqLYtrsajpumCZf2pDHJwDWIkibmkDFAO1MrY2XBNPjgHgMOeZXdv0M7-72myesmZtI37eaun-W3FuQ39cLaO3lRkzZU_mPeLn2WVGXWV72hdI7Gdq-nWZ4XqlaBtsr6ovB865M2o")
    c.set(".CNBlogsCookie","1C471FCB3DBD9760AF2B961873F3DA2F1185FA4F30601E92CDFF1B31B750B818AF4577342983A15C90B02834594E5AD1431AC3845BDF7697AD5938BF48292E6283772F1076052113E1F38B35A7A387F939C4346A917245B4BE70BE31CB11007761D72E93")
    s.cookies.update(c)

    r = s.get(url)

    if "开发者的网上家园" in r.text:
        print("博客园登录成功！")
    else:
        print("博客园登录失败！")
    return s

def bky_save(s):
    """博客园——保存随笔"""

    url = "https://i.cnblogs.com/EditPosts.aspx?opt=1"
    body = {
        "__VIEWSTATE":"",
        "__VIEWSTATEGENERATOR":"FE27D343",
        "Editor$Edit$txbTitle":"adbsd",
        "Editor$Edit$EditorBody":"<p>adbsd</p>",
        "Editor$Edit$Advanced$ckbPublished":"on",
        "Editor$Edit$Advanced$chkDisplayHomePage":"on",
        "Editor$Edit$Advanced$chkComments":"on",
        "Editor$Edit$Advanced$chkMainSyndication":"on",
        "Editor$Edit$Advanced$txbEntryName":"",
        "Editor$Edit$Advanced$txbExcerpt":"",
        "Editor$Edit$Advanced$txbTag":"",
        "Editor$Edit$Advanced$tbEnryPassword":"",
        "Editor$Edit$lkbDraft":"存为草稿"
    }
    r2 = s.post(url,data=body)
    if "postid" in r2.url:
        print("随笔保存成功！")
        print(r2.url)
        postid = re.findall("postid=(.+?)&actiontip",r2.url)[0]
        return postid
    else:
        print("随笔保存失败!")

def bky_delete(s,postid):
    """博客园——删除随笔"""
    url = "https://i.cnblogs.com/post/delete"
    body={
        "postId":postid
    }
    r3 = s.post(url,json=body)
    # r3 = s.post(url,data=json.dumps(body))
    isSuccess = r3.json()["isSuccess"]
    if isSuccess:
        print("删除成功！")
        return True
    else:
        print("删除失败！")
        return ""


if __name__ == '__main__':
    s = requests.session()
    s = bky_login(s)
    postid = bky_save(s)
    print(postid)
    result = bky_delete(s,postid)
    print(result)
    assert result
